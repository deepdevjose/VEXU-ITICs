{"mode":"Text","hardwareTarget":"brain","textContent":"# ================================================================\n# VEXcode – Configuración y Teleoperado (Robot con llantas mecanum)\n# ---------------------------------------------------------------\n# Descripción:\n#   Control de un robot con tren motriz de 4 motores (mecanum) y\n#   actuadores adicionales: rampa, cepillo, garra y pinza.\n#\n#   • Conducción tipo arcade:\n#       - Axis3: avance/retroceso\n#       - Axis4: strafe lateral (izquierda/derecha)\n#   • Rampa:\n#       - Axis2: manual\n#       - Botón B: alterna modo rampa AUTO (370 RPM) / MANUAL\n#   • Cepillo:\n#       - Botón A: alterna encendido/apagado\n#   • Garra:\n#       - L1 abre (FORWARD), R1 cierra (REVERSE) con retención\n#   • Pinza:\n#       - L2 abre (FORWARD), R2 cierra (REVERSE) con retención\n#\n# Notas:\n#   - Usa zona muerta (DEADZONE) para ignorar ruido del joystick.\n#   - Ajusta inversión (reversa) de motores según cableado real.\n#\n# Autor: @deepdevjose - github.com/deepdevjose\n# ================================================================\n\nfrom vex import *\n\n# ------------------------------------------------\n# Inicialización del cerebro y controlador\n# ------------------------------------------------\nbrain = Brain()\ncontroller = Controller()\n\n# ------------------------------------------------\n# Motores del tren motriz (mecanum)\n# ------------------------------------------------\nmotor_back_left   = Motor(Ports.PORT19, GearSetting.RATIO_18_1, True)   # Izquierdo trasero\nmotor_back_right  = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)  # Derecho trasero\nmotor_front_left  = Motor(Ports.PORT17, GearSetting.RATIO_18_1, False)  # Izquierdo delantero\nmotor_front_right = Motor(Ports.PORT16, GearSetting.RATIO_18_1, True)   # Derecho delantero\n\n# ------------------------------------------------\n# Otros actuadores\n# ------------------------------------------------\nmotor_rampa            = Motor(Ports.PORT11, GearSetting.RATIO_6_1, True)\nmotor_cepillo          = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nmotor_garra_open_close = Motor(Ports.PORT12, GearSetting.RATIO_36_1, False)\nmotor_pinza_open_close = Motor(Ports.PORT14, GearSetting.RATIO_36_1, False)\n\n# ------------------------------------------------\n# Variables de estado global\n# ------------------------------------------------\ncepillo_on      = False   # Estado ON/OFF del cepillo\nprev_ButtonA    = False   # Flanco de botón A\n\nmodo_rampa_auto = False   # Estado AUTO/MANUAL de rampa\nprev_ButtonB    = False   # Flanco de botón B\n\nDEADZONE = 5  # Umbral para ignorar ruido de joystick\n\n# ================================================================\n# Funciones de Movimiento (Tren motriz)\n# ================================================================\ndef mover_adelante(velocidad: int) -> None:\n    \"\"\"Mueve el robot hacia adelante a 'velocidad' (%).\"\"\"\n    motor_back_left.spin(REVERSE, velocidad, PERCENT)\n    motor_back_right.spin(REVERSE, velocidad, PERCENT)\n    motor_front_left.spin(FORWARD, velocidad, PERCENT)\n    motor_front_right.spin(FORWARD, velocidad, PERCENT)\n\ndef mover_atras(velocidad: int) -> None:\n    \"\"\"Mueve el robot hacia atrás a 'velocidad' (%).\"\"\"\n    motor_back_left.spin(FORWARD, velocidad, PERCENT)\n    motor_back_right.spin(FORWARD, velocidad, PERCENT)\n    motor_front_left.spin(REVERSE, velocidad, PERCENT)\n    motor_front_right.spin(REVERSE, velocidad, PERCENT)\n\ndef girar_izquierda(velocidad: int) -> None:\n    \"\"\"Gira sobre su eje hacia la izquierda.\"\"\"\n    motor_front_left.spin(REVERSE,  velocidad, PERCENT)\n    motor_back_left.spin(REVERSE,   velocidad, PERCENT)\n    motor_front_right.spin(FORWARD, velocidad, PERCENT)\n    motor_back_right.spin(FORWARD,  velocidad, PERCENT)\n\ndef girar_derecha(velocidad: int) -> None:\n    \"\"\"Gira sobre su eje hacia la derecha.\"\"\"\n    motor_front_left.spin(FORWARD,   velocidad, PERCENT)\n    motor_back_left.spin(FORWARD,    velocidad, PERCENT)\n    motor_front_right.spin(REVERSE,  velocidad, PERCENT)\n    motor_back_right.spin(REVERSE,   velocidad, PERCENT)\n\ndef girarc_izquierda(velocidad: int) -> None:\n    \"\"\"Movimiento lateral (strafe) hacia la izquierda con mecanum.\"\"\"\n    motor_front_left.spin(REVERSE,  velocidad, PERCENT)\n    motor_back_left.spin(REVERSE,   velocidad, PERCENT)\n    motor_front_right.spin(FORWARD, velocidad, PERCENT)\n    motor_back_right.spin(FORWARD,  velocidad, PERCENT)\n\ndef girarc_derecha(velocidad: int) -> None:\n    \"\"\"Movimiento lateral (strafe) hacia la derecha con mecanum.\"\"\"\n    motor_front_left.spin(FORWARD,   velocidad, PERCENT)\n    motor_back_left.spin(FORWARD,    velocidad, PERCENT)\n    motor_front_right.spin(REVERSE,  velocidad, PERCENT)\n    motor_back_right.spin(REVERSE,   velocidad, PERCENT)\n\ndef detener() -> None:\n    \"\"\"Detiene todos los motores del tren motriz.\"\"\"\n    motor_back_left.stop()\n    motor_back_right.stop()\n    motor_front_left.stop()\n    motor_front_right.stop()\n\n# ================================================================\n# Funciones de Control (Rampa, Garra, Pinza, Cepillo)\n# ================================================================\ndef control_drive() -> None:\n    \"\"\"\n    Control arcade:\n      - Axis3 = avance/retroceso\n      - Axis4 = strafe lateral\n    \"\"\"\n    axis_forward = controller.axis3.position()\n    axis_strafe  = controller.axis4.position()\n\n    # Aplicar zona muerta\n    if abs(axis_forward) < DEADZONE:\n        axis_forward = 0\n    if abs(axis_strafe) < DEADZONE:\n        axis_strafe = 0\n\n    # Strafe tiene prioridad\n    if axis_strafe > 0:\n        motor_front_left.spin(FORWARD,   axis_strafe, PERCENT)\n        motor_back_left.spin(REVERSE,    axis_strafe, PERCENT)\n        motor_front_right.spin(REVERSE,  axis_strafe, PERCENT)\n        motor_back_right.spin(FORWARD,   axis_strafe, PERCENT)\n\n    elif axis_strafe < 0:\n        speed = abs(axis_strafe)\n        motor_front_left.spin(REVERSE,  speed, PERCENT)\n        motor_back_left.spin(FORWARD,   speed, PERCENT)\n        motor_front_right.spin(FORWARD, speed, PERCENT)\n        motor_back_right.spin(REVERSE,  speed, PERCENT)\n\n    elif axis_forward > 0:\n        mover_adelante(axis_forward)\n    elif axis_forward < 0:\n        mover_atras(abs(axis_forward))\n    else:\n        detener()\n\ndef control_rampa() -> None:\n    \"\"\"Control manual de la rampa con Axis2.\"\"\"\n    value = controller.axis2.value()\n    if abs(value) < DEADZONE:\n        motor_rampa.stop()\n    else:\n        direction = REVERSE if value > 0 else FORWARD\n        motor_rampa.spin(direction, abs(value), PERCENT)\n\ndef aplicar_rampa_auto() -> None:\n    \"\"\"Modo automático de la rampa (370 RPM fijos).\"\"\"\n    motor_rampa.set_velocity(370, RPM)\n    motor_rampa.spin(FORWARD)\n\ndef toggle_rampa_mode() -> None:\n    \"\"\"Alterna entre modo rampa AUTO/MANUAL con botón B.\"\"\"\n    global modo_rampa_auto, prev_ButtonB\n    if controller.buttonB.pressing() and not prev_ButtonB:\n        modo_rampa_auto = not modo_rampa_auto\n    prev_ButtonB = controller.buttonB.pressing()\n\ndef control_garra_gradual() -> None:\n    \"\"\"Control gradual de la garra con L1/R1.\"\"\"\n    if controller.buttonL1.pressing():\n        motor_garra_open_close.spin(FORWARD, 60, PERCENT)\n    elif controller.buttonR1.pressing():\n        motor_garra_open_close.spin(REVERSE, 60, PERCENT)\n    else:\n        motor_garra_open_close.stop(HOLD)\n\ndef control_pinza_gradual() -> None:\n    \"\"\"Control gradual de la pinza con L2/R2.\"\"\"\n    if controller.buttonL2.pressing():\n        motor_pinza_open_close.spin(FORWARD, 100, PERCENT)\n    elif controller.buttonR2.pressing():\n        motor_pinza_open_close.spin(REVERSE, 100, PERCENT)\n    else:\n        motor_pinza_open_close.stop(HOLD)\n\ndef girar_cepillo() -> None:\n    \"\"\"Toggle ON/OFF del cepillo con botón A.\"\"\"\n    global cepillo_on, prev_ButtonA\n    if controller.buttonA.pressing() and not prev_ButtonA:\n        cepillo_on = not cepillo_on\n        if cepillo_on:\n            motor_cepillo.spin(REVERSE, 100, PERCENT)\n        else:\n            motor_cepillo.stop()\n    prev_ButtonA = controller.buttonA.pressing()\n\n# ================================================================\n# Bucle principal (Teleoperado)\n# ================================================================\ndef main() -> None:\n    \"\"\"\n    Bucle teleoperado:\n      - Controla movimiento (arcade).\n      - Controla rampa (manual/automático).\n      - Alterna y aplica el modo rampa.\n      - Actualiza cepillo, pinza y garra.\n      - Espera 20 ms para no saturar CPU.\n    \"\"\"\n    while True:\n        # Movimiento base\n        control_drive()\n\n        # Actuadores\n        girar_cepillo()\n        control_pinza_gradual()\n        control_garra_gradual()\n\n        # Rampa (modo automático/manual)\n        toggle_rampa_mode()\n        if modo_rampa_auto:\n            aplicar_rampa_auto()\n        else:\n            control_rampa()\n\n        wait(20, MSEC)\n\n# ------------------------------------------------\n# Punto de entrada\n# ------------------------------------------------\nif __name__ == \"__main__\":\n    main()","textLanguage":"python","robotConfig":[],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.12","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}